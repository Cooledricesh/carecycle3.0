openapi: 3.0.3
info:
  title: Medical Scheduling System API
  description: |
    A comprehensive medical scheduling system for hospital nurses to automate recurring test and injection schedules.
    Built with Next.js 15, TypeScript, and Supabase.
  version: 1.0.0
  contact:
    name: API Support
    email: support@medical-scheduler.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.medical-scheduler.com
    description: Production server

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Patients
    description: Patient management operations
  - name: Schedules
    description: Medical schedule management
  - name: Items
    description: Medical items and procedures
  - name: Dashboard
    description: Dashboard statistics and metrics

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: nurse@hospital.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: SecurePass123!
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  session:
                    $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: End user session and invalidate token
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Exchange refresh token for new access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                  expiresIn:
                    type: integer
                    example: 3600

  /patients:
    get:
      tags:
        - Patients
      summary: List all patients
      description: Retrieve a list of all active patients with optional filtering
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search patients by name or patient number
        - in: query
          name: department
          schema:
            type: string
          description: Filter by department
        - in: query
          name: careType
          schema:
            type: string
          description: Filter by care type
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter by active status
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of patients
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Patient'
                  total:
                    type: integer
                    example: 100
                  limit:
                    type: integer
                    example: 20
                  offset:
                    type: integer
                    example: 0
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Patients
      summary: Create a new patient
      description: Register a new patient in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientCreateInput'
      responses:
        '201':
          description: Patient created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict - Patient number already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /patients/{id}:
    get:
      tags:
        - Patients
      summary: Get patient by ID
      description: Retrieve detailed information about a specific patient
      parameters:
        - $ref: '#/components/parameters/PatientIdParam'
      responses:
        '200':
          description: Patient details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags:
        - Patients
      summary: Update patient
      description: Update patient information
      parameters:
        - $ref: '#/components/parameters/PatientIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientUpdateInput'
      responses:
        '200':
          description: Patient updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      tags:
        - Patients
      summary: Delete patient
      description: Soft delete a patient (marks as inactive)
      parameters:
        - $ref: '#/components/parameters/PatientIdParam'
      responses:
        '204':
          description: Patient deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /patients/{id}/schedules:
    get:
      tags:
        - Patients
        - Schedules
      summary: Get patient schedules
      description: Retrieve all schedules for a specific patient
      parameters:
        - $ref: '#/components/parameters/PatientIdParam'
        - in: query
          name: status
          schema:
            type: string
            enum: [active, completed, cancelled, all]
          description: Filter by schedule status
      responses:
        '200':
          description: List of patient schedules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /schedules:
    get:
      tags:
        - Schedules
      summary: List schedules
      description: Retrieve schedules with various filtering options
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [today, upcoming, overdue, all]
          description: Schedule type filter
        - in: query
          name: patientId
          schema:
            type: string
            format: uuid
          description: Filter by patient ID
        - in: query
          name: status
          schema:
            type: string
            enum: [active, completed, cancelled]
          description: Filter by status
        - in: query
          name: daysAhead
          schema:
            type: integer
            minimum: 1
            maximum: 90
            default: 7
          description: Number of days to look ahead for upcoming schedules
      responses:
        '200':
          description: List of schedules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - Schedules
      summary: Create schedule
      description: Create a new medical schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleCreateInput'
      responses:
        '201':
          description: Schedule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /schedules/{id}:
    get:
      tags:
        - Schedules
      summary: Get schedule by ID
      description: Retrieve detailed information about a specific schedule
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
      responses:
        '200':
          description: Schedule details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags:
        - Schedules
      summary: Update schedule
      description: Update schedule information
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleUpdateInput'
      responses:
        '200':
          description: Schedule updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      tags:
        - Schedules
      summary: Cancel schedule
      description: Cancel a schedule (soft delete)
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
      responses:
        '204':
          description: Schedule cancelled successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /schedules/{id}/complete:
    post:
      tags:
        - Schedules
      summary: Mark schedule as completed
      description: Mark a schedule as completed and optionally create next occurrence
      parameters:
        - $ref: '#/components/parameters/ScheduleIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - executedDate
                - executedBy
              properties:
                executedDate:
                  type: string
                  format: date-time
                executedBy:
                  type: string
                  format: uuid
                notes:
                  type: string
                createNext:
                  type: boolean
                  default: true
                  description: Whether to create the next scheduled occurrence
      responses:
        '200':
          description: Schedule marked as completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  completedSchedule:
                    $ref: '#/components/schemas/Schedule'
                  nextSchedule:
                    $ref: '#/components/schemas/Schedule'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /dashboard/stats:
    get:
      tags:
        - Dashboard
      summary: Get dashboard statistics
      description: Retrieve statistics for the dashboard
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPatients:
                    type: integer
                    example: 150
                  activePatients:
                    type: integer
                    example: 120
                  todaySchedules:
                    type: integer
                    example: 45
                  overdueSchedules:
                    type: integer
                    example: 5
                  upcomingSchedules:
                    type: integer
                    example: 230
                  completionRate:
                    type: number
                    format: float
                    example: 0.92
                  recentActivities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /items:
    get:
      tags:
        - Items
      summary: List medical items
      description: Retrieve list of medical items and procedures
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category
        - in: query
          name: search
          schema:
            type: string
          description: Search items by name
      responses:
        '200':
          description: List of medical items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicalItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  parameters:
    PatientIdParam:
      in: path
      name: id
      required: true
      schema:
        type: string
        format: uuid
      description: Patient unique identifier

    ScheduleIdParam:
      in: path
      name: id
      required: true
      schema:
        type: string
        format: uuid
      description: Schedule unique identifier

    LimitParam:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Maximum number of items to return

    OffsetParam:
      in: query
      name: offset
      schema:
        type: integer
        minimum: 0
        default: 0
      description: Number of items to skip

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [nurse, admin, doctor]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          example: 3600
        tokenType:
          type: string
          example: Bearer

    Patient:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: John Doe
        patientNumber:
          type: string
          example: P12345
        department:
          type: string
          example: Oncology
        careType:
          type: string
          example: Chemotherapy
        isActive:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PatientDetail:
      allOf:
        - $ref: '#/components/schemas/Patient'
        - type: object
          properties:
            metadata:
              type: object
              additionalProperties: true
            schedules:
              type: array
              items:
                $ref: '#/components/schemas/Schedule'
            recentActivities:
              type: array
              items:
                $ref: '#/components/schemas/Activity'

    PatientCreateInput:
      type: object
      required:
        - name
        - patientNumber
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        patientNumber:
          type: string
          pattern: '^[A-Z][0-9]{5}$'
          example: P12345
        department:
          type: string
        careType:
          type: string
        metadata:
          type: object
          additionalProperties: true

    PatientUpdateInput:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        department:
          type: string
        careType:
          type: string
        isActive:
          type: boolean
        metadata:
          type: object
          additionalProperties: true

    Schedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
        patientId:
          type: string
          format: uuid
        itemId:
          type: string
          format: uuid
        itemName:
          type: string
          example: Blood Test
        intervalType:
          type: string
          enum: [daily, weekly, monthly, custom]
        intervalDays:
          type: integer
          minimum: 1
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        nextDueDate:
          type: string
          format: date
        status:
          type: string
          enum: [active, completed, cancelled]
        priority:
          type: string
          enum: [low, medium, high]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ScheduleDetail:
      allOf:
        - $ref: '#/components/schemas/Schedule'
        - type: object
          properties:
            patient:
              $ref: '#/components/schemas/Patient'
            item:
              $ref: '#/components/schemas/MedicalItem'
            executionHistory:
              type: array
              items:
                $ref: '#/components/schemas/Execution'

    ScheduleCreateInput:
      type: object
      required:
        - patientId
        - itemId
        - intervalType
        - startDate
      properties:
        patientId:
          type: string
          format: uuid
        itemId:
          type: string
          format: uuid
        intervalType:
          type: string
          enum: [daily, weekly, monthly, custom]
        intervalDays:
          type: integer
          minimum: 1
          description: Required when intervalType is 'custom'
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        priority:
          type: string
          enum: [low, medium, high]
          default: medium
        notes:
          type: string

    ScheduleUpdateInput:
      type: object
      properties:
        intervalType:
          type: string
          enum: [daily, weekly, monthly, custom]
        intervalDays:
          type: integer
          minimum: 1
        nextDueDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        priority:
          type: string
          enum: [low, medium, high]
        status:
          type: string
          enum: [active, completed, cancelled]
        notes:
          type: string

    MedicalItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Complete Blood Count
        category:
          type: string
          example: Laboratory Test
        description:
          type: string
        defaultInterval:
          type: integer
          description: Default interval in days
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    Execution:
      type: object
      properties:
        id:
          type: string
          format: uuid
        scheduleId:
          type: string
          format: uuid
        executedDate:
          type: string
          format: date-time
        executedBy:
          type: string
          format: uuid
        notes:
          type: string
        createdAt:
          type: string
          format: date-time

    Activity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [patient_created, schedule_created, schedule_completed, patient_updated]
        description:
          type: string
        userId:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details

  responses:
    UnauthorizedError:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Unauthorized
            code: AUTH_REQUIRED
            details:
              message: Valid authentication token required

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Not Found
            code: RESOURCE_NOT_FOUND
            details:
              message: The requested resource was not found

    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Bad Request
            code: VALIDATION_ERROR
            details:
              fields:
                - field: email
                  message: Invalid email format